#!/usr/bin/env python

import os
import sys
import time
import argparse
import h5py

import numpy as np
import psana 

import thor
from pypad import cspad
from pypad.read import enforce_raw_img_shape as eris
from pypad.utils import update_average, RadialAverager


parser = argparse.ArgumentParser(description='Average some runs from the current experiment')

parser.add_argument(
    '-r', '--run',
    type=int,
    help='run to process',
    required=True
)

parser.add_argument(
    '-m', '--max',
    type=int,
    help='max number of shots to average',
    default=None
)

args = parser.parse_args()

# ---------------------------
# PSANA CONFIG FILE - this must be set before a datasource is created
basedir = os.path.split(os.path.abspath( __file__ ))[0]
config_fn = os.path.join(basedir, "cxii0114.cfg")
psana.setConfigFile(config_fn)
psana.setOption('psana.l3t-accept-only',0)
print "Loading psana config file:    %s" % config_fn

cspad_ds1_src  = psana.Source('DetInfo(CxiDs1.0:Cspad.0)')
cspad_ds2_src  = psana.Source('DetInfo(CxiDsd.0:Cspad.0)')
evr_src        = psana.Source('DetInfo(NoDetector.0:Evr.0)')


print "\nReading run #: %d" % args.run
ds = psana.DataSource('exp=cxii0114:run=%d' % int(args.run))
epics = ds.env().epicsStore()
calib = ds.env().calibStore()

shot_index = 0

ds1_average = np.zeros((32, 185, 388))
ds2_average = np.zeros((32, 185, 388))

if args.max:
    print 'Stopping after %d shots...' % args.max

for evt in ds.events():

    if shot_index == args.max:
        print 'max number of shots reached!'
        break

    EVR_code = evt.get(psana.EvrData.DataV3, evr_src)
    if EVR_code is None:
        print 'Error, EVR code is `None`'
        continue

    ds1 = evt.get(psana.ndarray_float32_3, cspad_ds1_src, 'calibrated_ndarr')
    ds2 = evt.get(psana.ndarray_float32_3, cspad_ds2_src, 'calibrated_ndarr')

    if (ds1 == None) or (ds2 == None):
        print 'Error, data is `None`'
        continue

    # get the corrected pixel intensities        
    update_average(shot_index, ds1_average, ds1)
    update_average(shot_index, ds2_average, ds2)

    shot_index += 1
    print 'Shot : %d' % shot_index



output_path = '/reg/d/psdm/cxi/cxii0114/scratch/averages'
np.save(os.path.join(output_path, 'run%d_ds1_average.npy' % args.run), ds1_average)
np.save(os.path.join(output_path, 'run%d_ds2_average.npy' % args.run), ds2_average)

print 'Saved results to: %s' % output_path

